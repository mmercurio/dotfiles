# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
#ZSH_THEME="agnoster"
ZSH_THEME="powerlevel10k/powerlevel10k"
if [[ "$TERM" == "linux" ]]; then
  ZSH_THEME="agnoster"
fi

DEFAULT_USER=$USER # Do not display user@host for default user in prompt

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# Disabled because .oh-my-zsh files updated via chezmoi
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
HIST_STAMPS="yyyy-mm-dd"

# oh-my-zsh history settings
setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it

setopt hist_reduce_blanks     # Remove superfluous blanks from each command

##
# experimenting with history options (see man zshoptions)
# This helps with allowing history to be shared between shells
# and still allow sane up-arrow to recall most recent command.
#
# I *HATE* when up-arrow (or !!) recalls a command from
# another shell's history. I'm expecting the most recent
# command to be from the local shell's history.
#
# **** DOES NOT WORK!
# https://zsh.sourceforge.io/Doc/Release/Options.html#History
# https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html
#
# https://superuser.com/a/691603
setopt share_history
bindkey "${key[Up]}" up-line-or-local-history
bindkey "${key[Down]}" down-line-or-local-history

up-line-or-local-history() {
    zle set-local-history 1
    zle up-line-or-history
    zle set-local-history 0
}
zle -N up-line-or-local-history

down-line-or-local-history() {
    zle set-local-history 1
    zle down-line-or-history
    zle set-local-history 0
}
zle -N down-line-or-local-history

##

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
#plugins=(git)
plugins=(
{{- if eq .chezmoi.os "darwin" }}
  macos
{{- end }}
  git
  kubectl
  zsh-autosuggestions
  zsh-syntax-highlighting # Must be last
)

source $ZSH/oh-my-zsh.sh

# User configuration

# zsh-syntax-highlighting is SUPER SLOW when pasting longer lines.
export ZSH_HIGHLIGHT_MAXLENGTH=60

# LSCOLORS: symlinks are bright orange, dir are steel blue
#export LSCOLORS=exBxhxDxfxhxhxhxhxcxcx
#export LSCOLORS=GxFxCxDxBxegedabagaced
export LSCOLORS=ExFxCxDxBxegedabagaced

# You may need to manually set your language environment
export LANG=en_US.UTF-8

export EDITOR=vim
# https://unix.stackexchange.com/a/108840/449635
export LESS_TERMCAP_md=$(tput bold; tput setaf 2)  # green for bold in less & man

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

alias ls='ls --color=tty -h'
alias ldot='ls -da .*'
alias lldot='ls -dalFh .*'
alias ll='ls -lFh'
alias lls='ls -lFhSr'
alias llt='ls -lFhtr'
alias batcat=bat
alias man=batman
alias cdc='clear; cd'
alias gitlog='git --no-pager log -n20 --graph --decorate --pretty=oneline --abbrev-commit'
# use ripgrep to highlight text
alias hl='rg --passthru'

# worddiff using git diff: wd file1 file2
alias wd='git diff -U0 --word-diff --word-diff-regex=. --no-index -- '

autoload -U zmv
alias zcp='zmv -C'
alias zln='zmv -L'

alias chezmoicd="cd $(chezmoi source-path)"

### SSH aliases and functions
#
# These are used because ~/.ssh/config disables password auth by default.
# Occcasoinally, I need to auth with a password when my public keys
# are not yet installed. These aliases and shell functions make it
# easier to install keys and login with a password when needed.

# SSH via password when required
alias sshpw='ssh -o PasswordAuthentication=yes -o IdentityAgent=none'

# copy public key but using password to auth
alias sshpw-id='ssh-copy-id -o PasswordAuthentication=yes -o IdentityAgent=none -f -i ~/.ssh/id_ed25519.pub'

# copy key and then login using password to auth
sshid () {
	sshpw-id $* && ssh $*
}

# When in tmux refresh SSH_AUTH_SOCK and DISPLAY
# https://babushk.in/posts/renew-environment-tmux.html
if [[ -n "$TMUX" ]]; then
    function refresh {
        eval $(tmux showenv -s SSH_AUTH_SOCK)
        eval $(tmux showenv -s DISPLAY)
    }
else
    function refresh { }
fi

# zsh executes preexec before each command
function preexec {
    # Refresh environment if inside tmux
    refresh
}

# Load 1Password SSH environment
[[ ! -f ~/.ssh/env_1password ]] || source ~/.ssh/env_1password

# Load asdf version manager
[[ ! -f ~/.asdf/asdf.sh ]] || source ~/.asdf/asdf.sh

{{- if eq .chezmoi.os "darwin" }}

alias manp=man-preview

# macOS: Enable additional iTerm2 support
[[ ! -f ~/.iterm2_shell_integration.zsh ]] || source ~/.iterm2_shell_integration.zsh

{{- else if eq .chezmoi.os "linux" }}

# Unlock seat0 for remote RDP to GNOME
function unlock () {
    seat=${1:-seat0}
    session=$(loginctl list-sessions | awk -v pattern="${USER} ${seat}" '$0 ~ pattern { print $1 }')
    if [[ -z "${session}" ]]; then
        echo "loginctl session not found for seat ${seat}!" >&2
        loginctl list-sessions
        return 1
    fi
    loginctl unlock-session ${session}
}
{{- end }}

############  Dev Stuff here  ############

{{ if eq .chezmoi.os "darwin" -}}
# Docker Desktop
#[[ ! -d ~/.docker/bin ]] || PATH="$PATH:$HOME/.docker/bin"

{{ end -}}
# Load additional dev environment
[[ -z $DEVENV ]] || source $DEVENV

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ ! -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] || source "$HOME/.sdkman/bin/sdkman-init.sh"

